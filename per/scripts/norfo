#!/usr/bin/perl -w
#
# 13_03_05 13_03_11 13_03_12 13_03_27 13_04_09
# 14_01_08 14_01_20
#
use Getopt::Std;
use File::Basename;
use File::Copy;
#use strict;
#
# "norfo" to NORmalize 'FOto' names
#          making use of the general 'gefi' script
#
my $gefi = "gefi";
my $nom = "norfo";
my $it = "(*)"; # first bullet for help
#
if (not(exists($ARGV[0]))) { print "about $nom

PRINCIPLES

$it to normalize or copy a series of files (i) adding the
    day of the last modification of each initial file (or any
    string given by the user) before and (ii) lower casing them.
$it when a destination directory is given, files are
    copied not replaced.
$it no recursion is possible (but the starting directory 
    can be precised)
$it globbing allowed


OPTIONS (to be included within '-o')
 p   : written protected files with 400 file mode
       bits (default identical to the original
       file).
 s   : operates silenciously: no indication
       given on the screen (default on the
       contrary).
 j   : just to see which modifications will be
       done, that is a dry run (default: actions
       are performed). It implies a non silencious
       run.
 l   : no action is taken, no information output
       is issued, no check is performed but a list
       of concerned files is outputted which can
       be captured in a text file for future use.

PREFIX (to be included within '-p')

 -p prefix : instead of the day of last modification of the file
             (yyyy_mm_dd) any string can be used

DIRECTORIES
 -f fdir  : starting directory (default: working directory)
 -t tdir  : destinatin directory (default: starting directory)

USE

$nom [-o flags] [-p prefix] [-f fdir] [-t tdir] files

EXAMPLES

$nom  *.JPG
  ( renaming all '*.JPG' files of the present directory.)

$nom -f ori *.JPG 
  ( the same but for subdirectory 'ori'.)

$nom ori/*.JPG 
  ( again the same.)

$nom -p BELLES -f /media/camera -t ori  \\\"*.JPG\\\" 
  ( extracting pictures from her camera, 'BELLES' will not be
    lower cased.)

$nom | less

";} else {
  # getting the options
  getopt('oftp'); 
  # dealing the flag options
  my $options = "s"; my $voir = 1; my $fait = 1;
  if (defined our $opt_o) {
    if ($opt_o =~ /p/) { $options = "p$options";}
    if ($opt_o =~ /s/) { $options =~ s/s/S/; $voir = 0;}
    if ($opt_o =~ /j/) { $options = "j$options"; $fait = 0;}
    if ($opt_o =~ /l/) { $options = "l$options"; $fait = 0;}
  }
  $options = "-o $options";
  # dealing with the prefix option
  my $prefix = "DD";
  if (defined our $opt_p) {
    $prefix = "\\\"$opt_p\\\"";
  }
  # dealing with the starting directory
  my $fdir = '';
  if (defined our $opt_f) {
    $fdir = "-f $opt_f";
  }
  # dealing with the ending directory
  $tdir = "";
  if (defined our $opt_t) {
    $tdir = "-t $opt_t";
  } else {
    $options = $options."m";
  }
  # dealing with modification directory
  my $modif = "-m B[n,$prefix]:l[n]";
  # dealing with the designated files
  my $fifi = join(' ',@ARGV);
  # building the call to gefi
  my $callgefi = "$gefi $options $fdir $tdir $modif $fifi";
  # 
  # running gefi
  if ($voir) { print "<<$callgefi>>\n";}
  my @resu = `$callgefi`;
  print @resu;
} # else of there are arguments
#
exit 1;

