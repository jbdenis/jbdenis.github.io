#!/usr/bin/perl -w
#
my $testretrouve = 1;
#
sub retrouve {
  # gets either all directories or all files from one
  # starting directory. The first argument indicates that
  # files (==0) or directories (!=0) must be returned.
  # The second is the starting directory to explore.
  #
  # getting the arguments
  my $type = shift @_;
  my $dir  = shift @_;
  if (!(defined $dir)) { print "oui\n"; $dir = "./";}
  # removing the possible trailing /
  if ($dir =~ /\/$/) { $dir = substr($dir,0,-1);}
  # globbing if necessary
  if (!(-d $dir)) {
    my @didir = glob($dir);
    $dir = $didir[0];
  }
  # in case a directory was not indicated
  return "<<<<$dir>>>> is not a directory!\n" unless -d $dir;

  my @fichiers; my @repertoires;
  if (opendir my $dh, $dir)
  {
    # Capture entries first, so we don't descend with an
    # open dir handle.
    my @list;
    my $file;
    push @repertoires, $dir;
    while ($file = readdir $dh)
    {
      push @list, $file;
    }
    closedir $dh;

    for $file (@list)
    {
      # Unix file system considerations.
      next if $file eq '.' || $file eq '..';

      # Swap these two lines to follow symbolic links into
      # directories.  Handles circular links by entering an
      # infinite loop.
      push @fichiers, "$dir/$file"        if -f "$dir/$file";
      if ($type==0) {
        push @fichiers, &retrouve (0,"$dir/$file") if -d "$dir/$file";
      } else {
        push @repertoires, &retrouve (1,"$dir/$file") if -d "$dir/$file";
      }
    }
  }
  # returning
  if ($type==0) { return @fichiers;}
  else {
    # adding the trailing /
      foreach my $mrp (@repertoires) {
        if (!($mrp =~ /\/$/)) { $mrp = $mrp."/";}
      }
    return @repertoires;
  }
}
#
if ($testretrouve) {
  my $didi = "..";
  print "1:      files=", $_, "\n" for &retrouve ((0,$didi));
  print "2:directories=", $_, "\n" for &retrouve ((1,$didi));
  print "3:directories=", $_, "\n" for &retrouve ((1,"~/a"));
  print "4:directories=", $_, "\n" for &retrouve ((1,"~/a/"));
  print "5:      files=", $_, "\n" for &retrouve ((0,"~/a/"));
  die("is retrouve right?");
}
