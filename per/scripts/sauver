#!/usr/bin/perl -w
#
# 13_03_05 13_03_12 13_03_13 13_03_21 13_03_25
# 13_03_27 13_04_09 14_01_02 14_01_20 17_02_13
# 17_02_19
#
use Getopt::Std;
use File::Basename;
use File::Copy;
use strict;
#
# "sauver" duplicate some files with a stamp, for
#          instance before making hazardous changes.
#
my $gefi = "gefi";
my $nom = "sauver";
my $it = "(*)"; # first bullet for help
my $dot = "."; # component separator
#
if (not(exists($ARGV[0]))) { print "ABOUT $nom

PRINCIPLES

$it to copy a series of files with a stamp in the copied
    version.
$it the stamp can be either the moment, the day or any
    string.
$it the stamp can be placed before the name, before the
    suffix or after the name with (or without) a
     separating '$dot'.
$it no recursion is possible but a path can be introduced
    either as argument or paths with the file names
$it globbing allowed but quotation needed with a starting
    directory given by argument '-f'
$it resulting files of previous savings are replaced but 
    not saved.


OPTIONS (to be included within '-o')
 p     : copied files are protected files with the 400 file
         mode bits (default identical to the original
         file).
 s     : operates silenciously: no indication
         given on the screen (default on the
         contrary).
 J   : just to what would be the call to $gefi.
         (no action performed)
 j     : just to see which modifications will be
         done, that is a dry run (default: actions
         are performed). It implies a non silencious
         run.
 l     : no action is taken, no information output
         is issued, no check is performed but a list
         of concerned files is outputted (which can
         be captured in a text file for future use).
 d     : a 'day' stamp (default 'moment' stamp)
 a|i|b : the stamp must be placed:
           a: at the end of the name
           i: just before the last component of the name
           b: before the first component of the name
         (priority: a<i<b; default is b)
 u     : the stamp must not be tied with a '$dot'.

STAMP
 -s stamp : any stamp instead of common day or moment.
            (gets the priority over '-o d')

DIRECTORIES
 -f fdir  : starting directory (default: working directory)
 -t tdir  : destination directory (default: starting directory)

TO RECAPITULATE the saved format

 the stamp is the moment (default) or is the day ('-o d') or
           is fixed by the user with the value of '-s'.
           

 The position of the stamp is before (default) or just before
                           the last component (-o i) or after
                           the name (-o a). 

USE

$nom [-o flags] [-s stamp] [-f fdir] [-t tdir] files

EXAMPLES

$nom  *.lyx
  ( save all files from the working directory with names terminated 
    with \".lyx\" after adding them as first component the moment.)

$nom -o pid tra/*.JPG 
  ( save all files of subdirectory 'tra' and ending with '.JPG' 
    in the same directory ending them with '.yyyy_mm_dd.JPG' where
    'yyyy', 'mm' and 'dd' give the present day and protect them.

$nom -o au -s old -f ~/a \"*.pl\"   
  ( save the files ending with '.pl' of the '~/a' directory adding
    them 'old' at the end (without dot). )

$nom | less
  ( inline help )
";} else {
  # getting the options
  getopt('ofst'); 
  # dealing the flag options
  my $options = "s";
  my $modif0 = "B"; my $modif1 = "n"; my $modif2 = "ss";
  my $voir = 1; my $fait = 1; my $vresu = 1;
  my $jvoir = 0;
  my $antip = "c1"; my $antim = "\\\\d{4}_\\\\d{2}_\\\\d{2}_\\\\d{2}_\\\\d{2}_\\\\d{2}";
  my $antimb = "^"; my $antima = "\$"; my $display = "s";
  if (defined our $opt_o) {
    if ($opt_o =~ /p/) { $options = "p$options";}
    if ($opt_o =~ /s/) { $display =~ s/s/S/; $voir = 0; $vresu = 0}
    if ($opt_o =~ /j/) { $options = "j$options"; $fait = 0;}
    if ($opt_o =~ /J/) { $jvoir = 1;}
    if ($opt_o =~ /l/) { $display = "l$display"; $fait = 0; $voir = 0; $vresu = 1}
    if ($opt_o =~ /u/) {
      $modif0 = lc($modif0);
      $antima = "";
      if ($opt_o =~ /a/) {
        $antimb = "";
        $antima = "\$";
      }
    }
    # position
    if ($opt_o =~ /a/) {
      $modif1 = "c-1"; $antip = "c-1";
      $modif0 = "A";
    }
    if ($opt_o =~ /i/) {
      $modif1 = "c-1";
      $antip = "c-2"; 
      if ($opt_o =~ /u/) { $antip = "c-1";}
    }
    if ($opt_o =~ /b/) {
      $modif1 = "n"; $antip = "c1";
      $modif0 = "B";
    }
    # day stamp
    if ($opt_o =~ /d/) {
      $modif2 = "dd";
      $antim = "\\\\d{4}_\\\\d{2}_\\\\d{2}";
    }
  }
  $options = "-o $options";
  $display = "-d $display";
  # dealing with the stamp
  if (defined our $opt_s) {
    $modif2 = "\\\"$opt_s\\\"";
    $antim = $opt_s;
  }
  # building the modification
  my $modif = "-m ".$modif0."[".$modif1.",".$modif2."]";
  # building the selection
  my $selec = "-s x[".$antip.",".$antimb.$antim.$antima."]";
  # dealing with the starting directory
  my $fdir = '';
  if (defined our $opt_f) {
    $fdir = "-f $opt_f";
  }
  # dealing with the ending directory
  my $tdir = "";
  if (defined our $opt_t) {
    $tdir = "-t $opt_t";
  }
  # dealing with the designated files
  my $fifi = join(' ',@ARGV);
  if ($fifi eq "") { $fifi = "*";}
  # building the call to gefi
  my $callgefi = "$gefi $options $display $fdir $tdir $modif $selec $fifi";
  # 
  # calling gefi
  if ($jvoir) {
    print "<<$callgefi>>\n";
  } else {
    if ($voir) { print "<<$callgefi>>\n";}
    my @resu = `$callgefi`;
    if ($vresu) {
      print @resu;
    }
    if ($voir) {
      print $nom," finished\n";
    }
  }
} # else of there are no argument
#
exit 1;

