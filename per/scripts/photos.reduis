#!/usr/bin/perl -w
#use strict;
#
# 14_11_18 14_11_19 15_04_21 15_09_09
#
# With the help of ImageMagick reduce and place
# a set of original images in another directory
#   (see the inline documentation)
#
# From April 2015, the names of the modified
# pictures was modified to fit with a general
# principle of denomination. No more prefix
# but a suffix just before the extension.
#
use File::Copy;
use Getopt::Std;
use File::Basename;

# signature
my $pro = "photos.reduis";

# path separator
my $d_sep = "/";

# default values of the options
my $geo = "1200";
my $rep = "./";
my $dis = "s";
my $suf = "r";
my $beh = "a";

# number of images to transform
my $nbi = 0;
# number of already existing files
my $nbd = 0;
# number of already existing images
my $nbe = 0;
# to store the existing files
my @efi = ();

# inline help if no arguments
if ((scalar @ARGV) == 0) { 
  print "<<< $pro >>>
 
     Transforms a series of images by convert with
     a different geometry (usually a reduction) into 
     a precised directory keeping them the same name
     adding some suffix to the last component before
     the extension of the name file [default = '$suf'].
     For instance the conversion of 'my-picture.jpg' 
     is named 'my-picture$suf.jpg'.

     Already existing transformed images are detected
     preserved or overwritten, either automatically
     or according to individual answers.

     When there is no argument, the inline documentation
     is displayed.

     The only compulsory arguments are a series of files
     (possibly including a path) designing the images
     to transform.

     But default options can be modified with '-' arguments.
  
     '-g' geometry to use;                default = '$geo'
     '-t' destination directory;          default = '$rep'
     '-d' display to perform;             default = '$dis'
              's' for Statistics
              'c' for imagemagick Commands
              'x' for eXecution state
              'l' for List of already existing files
              'r' for aRguments
     '-s' suffix to add to file names;    default = '$suf'
     '-b' behaviour about existing files; default = '$beh'
              'p' to Preserve them
              'o' to Override them
              'a' to Ask what to do in case of

     Improvement:
          add the possibility to get the file names
          from a file text

     Exemples:
          $pro ~/a/*.jpg
          $pro -s _duplicated *.png
          $pro -g 500x450+10+9 *.png
          $pro | less
\n\n";
} else {
  # getting the options
  getopt('gtdsb'); 
  # defining the geometry
  if (defined our $opt_g) {
    $geo = "$opt_g";
  }
  # defining the destination directory
  if (defined our $opt_t) {
    $rep = "$opt_t";
  }
  # defining the level of display
  if (defined our $opt_d) {
    $dis = "$opt_d";
  }
  # defining the suffix for the transformed images
  if (defined our $opt_s) {
    $suf = "$opt_s";
  }
  # defining the behavior about already existing files
  if (defined our $opt_b) {
    $beh = "$opt_b";
  }
  # getting the displays to make
  my $sta = 0; if ($dis =~ /s/) { $sta = 1;}
  my $com = 0; if ($dis =~ /c/) { $com = 1;}
  my $exe = 0; if ($dis =~ /x/) { $exe = 1;}
  my $lis = 0; if ($dis =~ /l/) { $lis = 1;}
  my $arg = 0; if ($dis =~ /r/) { $arg = 1;}
  if ($dis =~ /0/) { $sta=$com=$exe=$lis=$arg=0;}
  if ($dis =~ /a/) { $sta=$com=$exe=$lis=$arg=1;}
  # getting what to do with preexisting files
  my $dup = "A";
  if ($beh =~ /a/) {
      $dup = "A";
  } else {
      if ($beh =~ /p/) {
	  $dup = "P";
      } else {
	  if ($beh =~ /o/) {
	      $dup = "O";
	  }
      }
  }
  # cheching the validity of the directory
  if (!(-d $rep)) {
      die("'$rep' does not seem a valid directory!");
  }
  # checking first the existence of every provided file
  foreach (@ARGV) {
      if (!(-e $_)) {
          die("'$_' does not seem an existing file");
      }
      $nbi++;
      # getting the name of the file
      my $file = basename($_);
      # deducing the name of the resulting file
      my @cfile = split /\./,$file;
      if ($#cfile < 1) {
	  die("'$_' has got no extension!");
      }
      $cfile[$#cfile-1] = $cfile[$#cfile-1].$suf;
      $file = join(".",@cfile);
      my $nfile = $rep.$d_sep.$file;
      my $nbfil = basename($nfile);
      # testing if the new file already exists
      if (-e $nfile) {
	  $nbd++;
	  push @efi,$file;
      }
  }
  if ($sta) {
      print " $nbi images has to be reduced into directory $rep\n";
      print " $nbd resulting images already exist\n";
  }
  if ($arg) {
      print "geometry=$geo to=$rep display=$dis",
            " suffix=$suf behavior=$beh\n";
  }
  # making the reduction by means of ImageMagick for each proposed files
  my $num = 0; $nbi = 0;
  foreach (@ARGV) {
      $nbi++;
      # getting the name of the file
      my $file = basename($_);
      if ($exe) {
          print "[$nbi] Reducing $file...";
      }
      # deducing the name of the resulting file
      my @cfile = split /\./,$file;
      if ($#cfile < 1) {
	  die("'$_' has got no extension!");
      }
      $cfile[$#cfile-1] = $cfile[$#cfile-1].$suf;
      $file = join(".",@cfile);
      my $nfile = $rep.$d_sep.$file;
      my $nbfil = basename($nfile);
      # testing if the new file already exists
      if ((-e $nfile) and not($dup =~ /O/)) {
	  $nbe++;
	  if ($exe) {
	      print "*"x20," BUT <<<$nbfil>>> already exists <$nbe>\n";
	  }
          if ($dup =~ /A/) {
              print " MUST EXISTING $nbfil BE OVERRIDDEN? y/n/Y/N? [default='n']\n",
                    "   (Y/N means for this ones and the other ones):";
              my $answ = <STDIN>;
              if ($answ =~ /N/) {
                  $dup = "P"; print("<P$dup>\n");
	      } else {
		  if ($answ =~ /Y/) { $dup = "O";}
                  if (lc($answ) =~ /y/) {
		      $num++;
		      # calling ImageMagick
		      my $commande = "convert -geometry $geo $_ $nfile";
		      my $resu = system $commande;
		      if ($resu < 0) {
			  print "The execution of $commande failed and $pro stopped!\n";
		      }
		      if ($exe) {
			  print "into $nbfil [$num]\n";
		      }
		      if ($com) { 
			  print "<",$commande,">\n";
		      }
		  }
	      }
	  }
      } else {
	  $num++;
          # calling ImageMagick
	  my $commande = "convert -geometry $geo $_ $nfile";
          my $resu = system $commande;
          if ($resu < 0) {
	      print "The execution of $commande failed and $pro stopped!\n";
	  }
	  if ($exe) {
	      print "into $nbfil [$num]\n";
	  }
	  if ($com) { 
	      print "<",$commande,">\n";
	  }
      }
  }
  if ($sta) {
      print " $num (out of $nbi) images have been reduced into directory $rep\n";
      if ($#eli >= 0) {
	  if ($lis) {
              print " Already existing are/were: ";
	      print join(" - ",@efi),"\n";
	  }
      }
  } else {
      print " The already existing files were: ";
      print join(" - ",@efi),"\n";
  }
}
# the end
